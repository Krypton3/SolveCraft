
import java.util.Arrays;

public class LISNlogN {
	   public static int binary_search(int A[], int l,int r, int key) {
	     int m;
	     while (r-l  > 1) {
	          m = l + (r-l) / 2;
	            if (A[m] >= key)
	             r = m;
	          else
	                l = m;
	      }
	       return r;
	   }
	   public static int LongestIncreasingSubsequenceLength(int A[], int len) {
	     int c[] = new int[len];
	     Arrays.fill(c, 0);
	     c[0] = A[0];
	     int sz = 1;
	     for (int i = 1; i < len; i++) {
	          if (A[i] < c[0]) {
	             c[0] = A[i];
	          }
	          else if (A[i] > c[sz-1]) {
	             c[sz++] = A[i];
	           } 
	          else {
	                int k = binary_search(c,-1,sz-1, A[i]);
	                c[k] = A[i];
	          }
	       }	   
	       return sz;
	  } 	 

	   public static void main(String args[]) {
	     int A[] = { 9, 2, 5, 3, 7, 11, 8, 10, 13, 6 };
	     int size = A.length;
	     System.out.println(size);
	     System.out.println("LIS size "+ LongestIncreasingSubsequenceLength(A, size));
	 }
}
