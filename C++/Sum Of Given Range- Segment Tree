//lightoj-1112
#include<bits/stdc++.h>
using namespace std;
#define MAX 100005
int arr[MAX];
int tree[3*MAX];
void MakeTree(int node,int b,int e)
{
    if(b==e){
        tree[node]=arr[b];
        return;
    }
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    MakeTree(left,b,mid);
    MakeTree(right,mid+1,e);
    tree[node]=tree[left]+tree[right];
}
void update(int node,int b,int e,int i,int value)
{
     if(i>e || i<b){
        return;
    }
    if(b>=i && e<=i){
        tree[node]=value;
        return;
    }
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    update(left,b,mid,i,value);
    update(right,mid+1,e,i,value);
    tree[node]=tree[left]+tree[right];
}
int query(int node,int b,int e,int i,int j)
{
    if(i>e || j<b){
        return 0;
    }
    if(b>=i && e<=j){
        return tree[node];
    }
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    int p1=query(left,b,mid,i,j);
    int p2=query(right,mid+1,e,i,j);
    return p1+p2;
}
int main()
{
    int test;
    scanf("%d",&test);
    for(int p=1;p<=test;p++){
        int n,q;
        scanf("%d %d",&n,&q);
        for(int i=0;i<n;i++){
            scanf("%d",&arr[i]);
        }
        MakeTree(1,0,n-1);
        printf("Case %d:\n",p);
        for(int k=0;k<q;k++){
            int num;
            scanf("%d",&num);
            if(num==1)
            {
                int i;
                scanf("%d",&i);
                printf("%d\n",arr[i]);
                arr[i]=0;
                update(1,0,n-1,i,0);
            }
            if(num==2)
            {
                int i,v;
                scanf("%d %d",&i,&v);
                arr[i]=arr[i]+v;
                update(1,0,n-1,i,arr[i]);
            }
            if(num==3)
            {
                int i,j;
                scanf("%d%d",&i,&j);
                printf("%d\n",query(1,0,n-1,i,j));
            }
        }
    }
}
